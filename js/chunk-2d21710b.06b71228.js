(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21710b"],{c4ae:function(n,t,e){"use strict";e.r(t),t["default"]='\n## 页面布局\n\n> 问题：假设高度默认`100px` ，请写出三栏布局，其中左栏、右栏各为`300px`，中间自适应。\n\n![](http://img.smyhvae.com/20180305_1520.png)\n\n分析：\n\n初学者想到的答案有两种：\n\n- 方法1：浮动\n- 方法2：绝对定位\n\n> 但要求你能至少写出三四种方法，才算及格。剩下的方法如下：\n\n- 方法3：`flexbox`。移动开发里经常用到。\n- 方法4：表格布局` table`。虽然已经淘汰了，但也应该了解。\n- 方法5：网格布局 `grid`\n\n\n**方法1、浮动：**\n\n> 左侧设置左浮动，右侧设置右浮动即可，中间会自动地自适应。\n\n\n**方法2、绝对定位：**\n\n> 左侧设置为绝对定位， ` left：0px`。右侧设置为绝对定位， `right：0px`。中间设置为绝对定位，`left `和`right` 都为`300px`，即可。中间的宽度会自适应。\n\n\n> 使用`article`标签作为容器，包裹左、中、右三个部分。\n\n\n> 方法1 和方法2 的代码如下：\n\n```html\n<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <title>Document</title>\n    <style>\n        html * {\n            padding: 0px;\n            margin: 0px;\n        }\n\n        .layout {\n            margin-bottom: 150px;\n        }\n\n\n        .layout article div { /*注意，这里是设置每个小块儿的高度为100px，而不是设置大容器的高度。大容器的高度要符合响应式*/\n            height: 100px;\n        }\n\n        /* 方法一 start */\n\n        .layout.float .left {\n            float: left;\n            width: 300px;\n            background: red;\n        }\n\n        .layout.float .right {\n            float: right;\n            width: 300px;\n            background: blue;\n        }\n\n        .layout.float .center {\n            background: green;\n\n        }\n\n        /* 方法一 end */\n\n\n        /* 方法二 start */\n        .layout.absolute .left-center-right {\n            position: relative;\n        }\n\n        .layout.absolute .left {\n            position: absolute;\n            left: 0;\n            width: 300px;\n            background: red;\n        }\n\n        /* 【重要】中间的区域，左侧定位300px，右侧定位为300px，即可完成。宽度会自使用 */\n        .layout.absolute .center {\n            position: absolute;\n            left: 300px;\n            right: 300px;\n            background: green;\n        }\n\n        .layout.absolute .right {\n            position: absolute;\n            right: 0;\n            width: 300px;\n            background: blue;\n        }\n\n\n        /* 方法二 end */\n    </style>\n</head>\n\n<body>\n\n    \x3c!-- 方法一：浮动 start --\x3e\n    \x3c!-- 输入 section.layout.float，即可生成  --\x3e\n    <section class="layout float">\n        \x3c!-- 用  article 标签包裹左、中、右三个部分 --\x3e\n        <article class="left-right-center">\n            \x3c!-- 输入 div.left+div.right+div.center，即可生成 --\x3e\n            <div class="left">\n                我是 left\n            </div>\n            <div class="right">\n                我是 right\n            </div>\n            <div class="center">\n                浮动解决方案\n                我是 center\n            </div>\n\n        </article>\n\n    </section>\n    \x3c!-- 方法一：浮动 end --\x3e\n\n    <section class="layout absolute">\n        <article class="left-center-right">\n            <div class="left">\n                我是 left\n            </div>\n            <div class="right">\n                我是 right\n            </div>\n            <div class="center">\n                <h1>绝对定位解决方案</h1>\n                我是 center\n            </div>\n        </article>\n    </section>\n</body>\n</html>\n\n```\n\n效果如下：\n\n![](http://img.smyhvae.com/20180305_1640.gif)\n\n\n**方法3、flexbox布局**\n\n> 将左中右所在的容器设置为`display: flex`，设置两侧的宽度后，然后让中间的`flex = 1`，即可。\n\n\n```html\n<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <title>Document</title>\n    <style>\n        html * {\n            padding: 0;\n            margin: 0;\n        }\n\n        .layout article div {\n            height: 100px;\n        }\n\n        .left-center-right {\n            display: flex;\n        }\n\n        .layout.flex .left {\n            width: 300px;\n            background: red;\n        }\n\n        .layout.flex .center {\n            flex: 1;\n            background: green;\n        }\n\n        .layout.flex .right {\n            width: 300px;\n            background: blue;\n        }\n    </style>\n\n</head>\n\n<body>\n    <section class="layout flex">\n        <article class="left-center-right-">\n            <div class="left">\n                我是 left\n            </div>\n            <div class="center">\n                <h1>flex布局解决方案</h1>\n                我是 center\n            </div>\n            <div class="right">\n                我是 right\n            </div>\n\n        </article>\n    </section>\n\n</body>\n\n</html>\n\n\n```\n\n\n效果如下：\n\n![](http://img.smyhvae.com/20180305_1700.gif)\n\n\n\n\n**方法4、表格布局 table**\n\n> 设置整个容器的宽度为`100%`，设置三个部分均为表格，然后左边的单元格为 `300px`，右边的单元格为 `300px`，即可。中间的单元格会自适应。\n\n```html\n<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <title>Document</title>\n    <style>\n        html * {\n            padding: 0;\n            margin: 0;\n        }\n\n        .layout.table div {\n            height: 100px;\n        }\n\n        /* 重要：设置容器为表格布局，宽度为100% */\n        .layout.table .left-center-right {\n            width: 100%;\n            display: table;\n            height: 100px;\n\n        }\n\n        .layout.table .left-center-right div {\n            display: table-cell; /* 重要：设置三个模块为表格里的单元*/\n        }\n\n        .layout.table .left {\n            width: 300px;\n            background: red;\n        }\n\n        .layout.table .center {\n            background: green;\n        }\n\n        .layout.table .right {\n            width: 300px;\n            background: blue;\n        }\n    </style>\n\n</head>\n\n<body>\n    <section class="layout table">\n        <article class="left-center-right">\n            <div class="left">\n                我是 left\n            </div>\n            <div class="center">\n                <h1>表格布局解决方案</h1>\n                我是 center\n            </div>\n            <div class="right">\n                我是 right\n            </div>\n\n        </article>\n    </section>\n\n</body>\n\n</html>\n\n```\n\n![](http://img.smyhvae.com/20180305_1855.gif)\n\n**方法5、网格布局 grid**\n\n```html\n<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <title>Document</title>\n    <style>\n        html * {\n            padding: 0;\n            margin: 0;\n        }\n\n        /* 重要：设置容器为网格布局，宽度为100% */\n        .layout.grid .left-center-right {\n            display: grid;\n            width: 100%;\n            grid-template-rows: 100px;\n            grid-template-columns: 300px auto 300px;  /* 重要：设置网格为三列，并设置每列的宽度。即可。*/\n\n        }\n\n        .layout.grid .left {\n            background: red;\n        }\n\n        .layout.grid .center {\n            background: green;\n        }\n\n        .layout.grid .right {\n            background: blue;\n        }\n    </style>\n\n</head>\n\n<body>\n    <section class="layout grid">\n        <article class="left-center-right">\n            <div class="left">\n                我是 left\n            </div>\n            <div class="center">\n                <h1>网格布局解决方案</h1>\n                我是 center\n            </div>\n            <div class="right">\n                我是 right\n            </div>\n\n        </article>\n    </section>\n\n</body>\n\n</html>\n```\n\n\n效果：\n\n![](http://img.smyhvae.com/20180305_1920.gif)\n\n\n**延伸：五种方法的对比**\n\n> 五种方法的优缺点\n\n- 考虑中间模块的高度问题\n- 兼容性问题：实际开发中，哪个最实用？\n\n方法1：浮动：\n\n- 优点：兼容性好。\n- 缺点：浮动会脱离标准文档流，因此要清除浮动。我们解决好这个问题即可。\n\n方法:2：绝对定位\n\n- 优点：快捷。\n- 缺点：导致子元素也脱离了标准文档流，可实用性差。\n\n方法3：flex 布局（CSS3中出现的）\n\n- 优点：解决上面两个方法的不足，flex布局比较完美。移动端基本用 flex布局。\n\n方法4：表格布局\n\n- 优点：表格布局在很多场景中很实用，兼容性非常好。因为IE8不支持 flex，此时可以尝试表格布局\n- 缺点：因为三个部分都当成了**单元格**来对待，此时，如果中间的部分变高了，其会部分也会被迫调整高度。但是，在很多场景下，我们并不需要两侧的高度增高。\n\n> 什么时候用 `flex `布局 or 表格布局，看具体的场景。二者没有绝对的优势，也没有绝对的不足。\n\n\n方法5：网格布局\n\n- CSS3中引入的布局，很好用。代码量简化了很多。\n\n> PS：面试提到网格布局，说明我们对新技术是有追求的。\n\n\n**延伸：如果题目中去掉高度已知**\n\n> 问题：题目中，如果去掉高度已知，我们往中间的模块里塞很多内容，让中间的模块撑开。会发生什么变化？哪个布局就不能用了？\n\n\n分析：其实可以这样理解，我们回去看上面的动画效果，当中间的模块变得很挤时，会发生什么效果？就是我们想要的答案。\n\n> 答案是：**flex 布局和表格布局可以通用**，其他三个布局都不能用了。\n\n\n\n**总结**\n\n> 涉及到的知识点：\n\n- 语义化掌握到位：每个区域用`section`、`article`代表容器、`div`代表块儿。如果通篇都用 div，那就是语义化没掌握好。\n- 页面布局理解深刻。\n- `CSS`基础知识扎实。\n- 思维灵活且积极上进。题目中可以通过`网格布局`来体现。\n- 代码书写规范。注意命名。上面的代码中，没有一行代码是多的。\n'}}]);