(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c116c"],{"450e":function(n,r,a){"use strict";a.r(r),r["default"]='\n**栈和队列的区别?**\n\n- 栈的插入和删除操作都是在一端进行的，而队列的操作却是在两端进行的。\n- 队列先进先出，栈先进后出。\n- 栈只允许在表尾一端进行插入和删除，而队列只允许在表尾一端进行插入，在表头一端进行删除\n\n**栈和堆的区别？**\n\n- 栈区（stack）—   由编译器自动分配释放   ，存放函数的参数值，局部变量的值等。\n- 堆区（heap）   —   一般由程序员分配释放，   若程序员不释放，程序结束时可能由OS回收。\n- 堆（数据结构）：堆可以被看成是一棵树，如：堆排序；\n- 栈（数据结构）：一种先进后出的数据结构\n\n**快速 排序的思想并实现一个快排？**\n\n"快速排序"的思想很简单，整个排序过程只需要三步：\n\n- （1）在数据集之中，找一个基准点\n- （2）建立两个数组，分别存储左边和右边的数组\n- （3）利用递归进行下次比较\n\n```js\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;//如果数组只有一个数，就直接返回；\n    }\n\n    var num = Math.floor(arr.length/2);//找到中间数的索引值，如果是浮点数，则向下取整\n\n    var numValue = arr.splice(num,1);//找到中间数的值\n    var left = [];\n    var right = [];\n\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]<numValue){\n            left.push(arr[i]);//基准点的左边的数传到左边数组\n        }\n        else{\n           right.push(arr[i]);//基准点的右边的数传到右边数组\n        }\n    }\n\n    return quickSort(left).concat([numValue],quickSort(right));//递归不断重复比较\n}\n\nalert(quickSort([32,45,37,16,2,87]));//弹出“2,16,32,37,45,87”\n```\n'}}]);