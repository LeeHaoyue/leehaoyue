(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d231032"],{ef72:function(n,t,e){"use strict";e.r(t),t["default"]="\n## 1 前言\n\n从本章起，对代码的要求没之前那么高了，但是，要求你对知识面的掌握要足够宽。\n\n**前端通信类的问题，主要包括以下内容**：\n\n1. 什么是**同源策略**及限制\n\n> 同源策略是一个概念，就一句话。有什么限制，就三句话。能说出来即可。\n\n2. **前后端如何通信**\n\n> 如果你不准备，估计也就只能说出`ajax`。这个可以考察出知识面。\n\n3. 如何创建**Ajax**\n\n> `Ajax`在前后端通信中经常用到。做业务时，可以借助第三方的库，比如`vue`框架里的库、`jQuery`也有封装好的方法。但如果让你用原生的`js`去实现，该怎么做？\n\n这就是考察你的动手能力，以及框架原理的掌握。如果能写出来，可以体现出你的基本功。是加分项。\n\n4. **跨域通信**的几种方式\n\n> 这部分非常重要。无非就是问你：什么是跨域、跨域有什么限制、**跨域有几种方式**。\n\n下面分别讲解。\n\n\n## 2 同源策略的概念和具体限制\n\n> **同源策略**：限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。（来自MDN官方的解释）\n\n**具体解释：**\n\n1. `源`包括三个部分：协议、域名、端口（`http`协议的默认端口是`80`）。如果有任何一个部分不同，则`源`不同，那就是跨域了。\n2. `限制`：这个源的文档没有权利去操作另一个源的文档。这个限制体现在：（要记住）\n\n- `Cookie`、`LocalStorage`和`IndexDB`无法获取。\n- 无法获取和操作`DOM`。\n- 不能发送`Ajax`请求。我们要注意，`Ajax`只适合**同源**的通信。\n\n## 3 前后端如何通信\n\n**主要有以下几种方式：**\n\n- `Ajax`：不支持跨域。\n- `WebSocket`：不受同源策略的限制，支持跨域\n- `CORS`：不受同源策略的限制，支持跨域。一种新的通信协议标准。可以理解成是：**同时支持同源和跨域的Ajax**。\n\n## 4 如何创建Ajax\n\n> 在回答 `Ajax` 的问题时，要回答以下几个方面：\n\n1. `XMLHttpRequest` 的工作原理\n2. 兼容性处理\n\n> `XMLHttpRequest`只有在高级浏览器中才支持。在回答问题时，这个兼容性问题不要忽略。\n\n3. 事件的触发条件\n4. 事件的触发顺序\n\n> `XMLHttpRequest`有很多触发事件，每个事件是怎么触发的。\n\n### 4.1 发送 Ajax 请求的五个步骤（XMLHttpRequest的工作原理）\n\n1. 创建`XMLHttpRequest` 对象。\n2. 使用`open`方法设置请求的参数。`open(method, url, 是否异步)``。\n3. 发送请求。\n4. 注册事件。 注册`onreadystatechange`事件，状态改变时就会调用。\n\n> 如果要在数据完整请求回来的时候才调用，我们需要手动写一些判断的逻辑。\n\n5. 获取返回的数据，更新UI。\n\n### 4.2 发送 get 请求和 post 请求\n\n> `get`请求举例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n<h1>Ajax 发送 get 请求</h1>\n<input type=\"button\" value=\"发送get_ajax请求\" id='btnAjax'>\n\n<script type=\"text/javascript\">\n    // 绑定点击事件\n    document.querySelector('#btnAjax').onclick = function () {\n        // 发送ajax 请求 需要 五步\n\n        // （1）创建异步对象\n        var ajaxObj = new XMLHttpRequest();\n\n        // （2）设置请求的参数。包括：请求的方法、请求的url。\n        ajaxObj.open('get', '02-ajax.php');\n\n        // （3）发送请求\n        ajaxObj.send();\n\n        //（4）注册事件。 onreadystatechange事件，状态改变时就会调用。\n        //如果要在数据完整请求回来的时候才调用，我们需要手动写一些判断的逻辑。\n        ajaxObj.onreadystatechange = function () {\n            // 为了保证 数据 完整返回，我们一般会判断 两个值\n            if (ajaxObj.readyState == 4 && ajaxObj.status == 200) {\n                // 如果能够进到这个判断 说明 数据 完美的回来了,并且请求的页面是存在的\n                // 5.在注册的事件中 获取 返回的 内容 并修改页面的显示\n                console.log('数据返回成功');\n\n                // 数据是保存在 异步对象的 属性中\n                console.log(ajaxObj.responseText);\n\n                // 修改页面的显示\n                document.querySelector('h1').innerHTML = ajaxObj.responseText;\n            }\n        }\n    }\n<\/script>\n</body>\n</html>\n```\n\n> `post` 请求举例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n<h1>Ajax 发送 get 请求</h1>\n<input type=\"button\" value=\"发送put_ajax请求\" id='btnAjax'>\n<script type=\"text/javascript\">\n\n    // 异步对象\n    var xhr = new XMLHttpRequest();\n\n    // 设置属性\n    xhr.open('post', '02.post.php');\n\n    // 如果想要使用post提交数据,必须添加此行\n    xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\n    // 将数据通过send方法传递\n    xhr.send('name=fox&age=18');\n\n    // 发送并接受返回值\n    xhr.onreadystatechange = function () {\n        // 这步为判断服务器是否正确响应\n        if (xhr.readyState == 4 && xhr.status == 200) {\n            alert(xhr.responseText);\n        }\n    };\n<\/script>\n</body>\n</html>\n```\n\n### 4.3 onreadystatechange 事件\n\n> 注册 `onreadystatechange` 事件后，每当 `readyState` 属性改变时，就会调用 `onreadystatechange` 函数。\n\n> `readyState`：（存有 `XMLHttpRequest` 的状态。从 `0` 到 `4` 发生变化）\n\n- `0`: 请求未初始化\n- `1`: 服务器连接已建立\n- `2`: 请求已接收\n- `3`: 请求处理中\n- `4`: 请求已完成，且响应已就绪\n\n### 4.4 事件的触发条件\n\n![](http://img.smyhvae.com/20180307_1443.png)\n\n### 4.5 事件的触发顺序\n\n![](http://img.smyhvae.com/20180307_1445.png)\n\n\n### 4.6 实际开发中用的 原生Ajax请求\n\n```javascript\n\n    var util = {};\n\n    //获取 ajax 请求之后的json\n    util.json = function (options) {\n\n        var opt = {\n            url: '',\n            type: 'get',\n            data: {},\n            success: function () {\n            },\n            error: function () {\n            },\n\n        };\n        util.extend(opt, options);\n        if (opt.url) {\n            //IE兼容性处理：浏览器特征检查。检查该浏览器是否存在XMLHttpRequest这个api，没有的话，就用IE的api\n            var xhr = XMLHttpRequest ? new XMLHttpRequest() : new window.ActiveXObject('Microsoft.XMLHTTP');\n\n            var data = opt.data,\n                url = opt.url,\n                type = opt.type.toUpperCase();\n            dataArr = [];\n        }\n\n        for (var key in data) {\n            dataArr.push(key + '=' + data[key]);\n        }\n\n        if (type === 'GET') {\n            url = url + '?' + dataArr.join('&');\n            xhr.open(type, url.replace(/\\?$/g, ''), true);\n            xhr.send();\n        }\n\n        if (type === 'POST') {\n            xhr.open(type, url, true);\n            // 如果想要使用post提交数据,必须添加此行\n            xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n            xhr.send(dataArr.join('&'));\n        }\n\n        xhr.onload = function () {\n            if (xhr.status === 200 || xhr.status === 304) { //304表示：用缓存即可。206表示获取媒体资源的前面一部分\n                var res;\n                if (opt.success && opt.success instanceof Function) {\n                    res = xhr.responseText;\n                    if (typeof res === 'string') {\n                        res = JSON.parse(res);  //将字符串转成json\n                        opt.success.call(xhr, res);\n                    }\n                }\n            } else {\n                if (opt.error && opt.error instanceof Function) {\n                    opt.error.call(xhr, res);\n                }\n            }\n        };\n    }\n\n\n```\n\n\n## 5 跨域通信的几种方式\n\n> 方式如下：\n\n1. `JSONP`\n2. `WebSocket`\n3. `CORS`\n4. `Hash`\n5. `postMessage`\n\n> 上面这五种方式，在面试时，都要说出来。\n\n### 5.1 JSONP\n\n> 面试会问：`JSONP`的原理是什么？怎么实现的？\n\n- 在`CORS`和`postMessage`以前，我们一直都是通过`JSONP`来做跨域通信的。\n\n> **JSONP的原理**：通过`<script>`标签的异步加载来实现的。比如说，实际开发中，我们发现，`head`标签里，可以通过`<script>`标签的`src`，里面放`url`，加载很多在线的插件。这就是用到了`JSONP`。\n\n**JSONP的实现：**\n\n> 比如说，客户端这样写：\n\n```html\n    <script src=\"http://www.smyhvae.com/?data=name&callback=myjsonp\"><\/script>\n```\n\n> 上面的`src`中，`data=name`是get请求的参数，`myjsonp`是和后台约定好的函数名。\n服务器端这样写：\n\n```js\n  myjsonp({\n      data: {}\n\n  })\n```\n\n\n> 于是，本地要求创建一个`myjsonp` 的**全局函数**，才能将返回的数据执行出来。\n\n**实际开发中，前端的JSONP是这样实现的：**\n\n```html\n<script>\n\n    var util = {};\n\n    //定义方法：动态创建 script 标签\n    /**\n     * [function 在页面中注入js脚本]\n     * @param  {[type]} url     [description]\n     * @param  {[type]} charset [description]\n     * @return {[type]}         [description]\n     */\n    util.createScript = function (url, charset) {\n        var script = document.createElement('script');\n        script.setAttribute('type', 'text/javascript');\n        charset && script.setAttribute('charset', charset);\n        script.setAttribute('src', url);\n        script.async = true;\n        return script;\n    };\n\n\n    /**\n     * [function 处理jsonp]\n     * @param  {[type]} url      [description]\n     * @param  {[type]} onsucess [description]\n     * @param  {[type]} onerror  [description]\n     * @param  {[type]} charset  [description]\n     * @return {[type]}          [description]\n     */\n    util.jsonp = function (url, onsuccess, onerror, charset) {\n        var callbackName = util.getName('tt_player'); //事先约定好的 函数名\n        window[callbackName] = function () {      //根据回调名称注册一个全局的函数\n            if (onsuccess && util.isFunction(onsuccess)) {\n                onsuccess(arguments[0]);\n            }\n        };\n        var script = util.createScript(url + '&callback=' + callbackName, charset);   //动态创建一个script标签\n        script.onload = script.onreadystatechange = function () {   //监听加载成功的事件，获取数据\n            if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n                script.onload = script.onreadystatechange = null;\n                // 移除该script的 DOM 对象\n                if (script.parentNode) {\n                    script.parentNode.removeChild(script);\n                }\n                // 删除函数或变量\n                window[callbackName] = null;  //最后不要忘了删除\n            }\n        };\n        script.onerror = function () {\n            if (onerror && util.isFunction(onerror)) {\n                onerror();\n            }\n        };\n        document.getElementsByTagName('head')[0].appendChild(script); //往html中增加这个标签，目的是把请求发送出去\n    };\n\n<\/script>\n\n```\n\n### 5.2 WebSocket\n\n> `WebSocket`的用法如下：\n\n```javascript\n    //\n\n    var ws = new WebSocket('wss://echo.websocket.org'); //创建WebSocket的对象。参数可以是 ws 或 wss，后者表示加密。\n\n    //把请求发出去\n    ws.onopen = function (evt) {\n        console.log('Connection open ...');\n        ws.send('Hello WebSockets!');\n    };\n\n\n    //对方发消息过来时，我接收\n    ws.onmessage = function (evt) {\n        console.log('Received Message: ', evt.data);\n        ws.close();\n    };\n\n    //关闭连接\n    ws.onclose = function (evt) {\n        console.log('Connection closed.');\n    };\n```\n\n> 面试一般不会让你写这个代码，一般是考察你是否了解 `WebSocket`概念，知道有这么回事即可。\n\n### 5.3 CORS\n\n> `CORS` 可以理解成是**既可以同步、也可以异步**的Ajax。\n\n- fetch` 是一个比较新的`API`，用来实现`CORS`通信。用法如下：\n\n```javascript\n      // url（必选），options（可选）\n      fetch('/some/url/', {\n          method: 'get',\n      }).then(function (response) {  //类似于 ES6中的promise\n\n      }).catch(function (err) {\n        // 出错了，等价于 then 的第二个参数，但这样更好用更直观\n      });\n```\n\n> 另外，如果面试官问：“CORS为什么支持跨域的通信？”\n\n> 答案：跨域时，浏览器会拦截`Ajax`请求，并在`http`头中加`Origin`。\n\n### 5.4 Hash\n\n- `url`的`#`后面的内容就叫`Hash`。**Hash的改变，页面不会刷新**。这就是用 `Hash` 做跨域通信的基本原理。\n\n> 补充：`url`的`?`后面的内容叫`Search`。`Search`的改变，会导致页面刷新，因此不能做跨域通信。\n\n**使用举例：**\n\n**场景**：我的页面 `A` 通过`iframe`或`frame`嵌入了跨域的页面 `B`。\n\n> 现在，我这个`A`页面想给`B`页面发消息，怎么操作呢？\n\n1. 首先，在我的`A`页面中：\n\n```javascript\n    //伪代码\n    var B = document.getElementsByTagName('iframe');\n    B.src = B.src + '#' + 'jsonString';  //我们可以把JS 对象，通过 JSON.stringify()方法转成 json字符串，发给 B\n```\n\n2. 然后，在`B`页面中：\n\n```javascript\n    // B中的伪代码\n    window.onhashchange = function () {  //通过onhashchange方法监听，url中的 hash 是否发生变化\n        var data = window.location.hash;\n    };\n```\n\n### 5.5 postMessage()方法\n\n> `H5`中新增的`postMessage()``方法，可以用来做跨域通信。既然是H5中新增的，那就一定要提到。\n\n**场景**：窗口 A (`http:A.com`)向跨域的窗口 B (`http:B.com`)发送信息。步骤如下\n\n1. 在`A`窗口中操作如下：向`B`窗口发送数据：\n\n\n```javascript\n  // 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息\n   Bwindow.postMessage('data', 'http://B.com'); //这里强调的是B窗口里的window对象\n```\n\n2. 在`B`窗口中操作如下：\n\n```javascript\n    // 在窗口B中监听 message 事件\n    Awindow.addEventListener('message', function (event) {   //这里强调的是A窗口里的window对象\n        console.log(event.origin);  //获取 ：url。这里指：http://A.com\n        console.log(event.source);  //获取：A window对象\n        console.log(event.data);    //获取传过来的数据\n    }, false);\n```\n"}}]);