(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21d8b0"],{d26b:function(n,e,t){"use strict";t.r(e),e["default"]='\n**手写事件侦听器，并要求兼容浏览器**\n```JavaScript\nvar eventUtil = {\n  getEvent: function(event) {\n      return event || window.event;\n  },\n\n  getTarget: function(event) {\n      return event.target || event.srcElement;\n  },\n\n  addListener: function(element, type, hander) {\n      if (element.addEventListener) {\n          element.addEventListener(type, hander, false);\n      } else if (element.attachEvent) {\n          element.attachEvent(\'on\' + type, hander);\n      } else {\n          element[\'on\' + type] = hander;\n      }\n  },\n\n  removeListener: function(element, type, hander) {\n      if (element.removeEventListener) {\n          element.removeEventListener(type, hander, false);\n      } else if (element.deattachEvent) {\n          element.detachEvent(type, hander);\n      } else {\n          element[\'on\' + type] = null;\n      }\n  },\n\n  preventDefault: function(event) {\n      if (event.preventDefault) {\n          event.preventDefault();\n      } else {\n          event.returnValue = false;\n      }\n  },\n\n  stopPropagation: function(event) {\n      if (event.stopPropagation) {\n          event.stopPropagation();\n      } else {\n          event.cancelBubble = true;\n      }\n  }\n};\n\n// 调用\n(function() {\n  var btn = document.getElementById("btn");\n  var link = document.getElementsByTagName("a")[0];\n\n  eventUtil.addListener(btn, "click", function(event) {\n      var event = eventUtil.getEvent(event);\n      var target = eventUtil.getTarget(event);\n      alert(event.type);\n      alert(target);\n      eventUtil.stopPropagation(event);\n  });\n\n  eventUtil.addListener(link, "click", function(event) {\n      alert("prevent default event");\n      var event = eventUtil.getEvent(event);\n      eventUtil.preventDefault(event);\n  });\n\n  eventUtil.addListener(document.body, "click", function() {\n      alert("click body");\n  });\n})();\n```\n\n**手写事件模型**\n\n```JavaScript\nvar Event = (function () {\n    var list = {}, bind, trigger, remove;\n    bind = function (key, fn) {\n        if (!list[key]) {\n            list[key] = [];\n        }\n        list[key].push(fn);\n    };\n    trigger = function () {\n        var key = Array.prototype.shift.call(arguments);\n        var fns = list[key];\n        if (!fns || fns.length === 0) {\n            return false;\n        }\n        for (var i = 0, fn; fn = fns[i++];) {\n            fn.apply(this, arguments);\n        }\n    };\n    remove = function (key, fn) {\n        var fns = list[key];\n        if (!fns) {\n            return false;\n        }\n        if (!fn) {\n            fns & (fns.length = 0);\n        } else {\n            for (var i = fns.length - 1; i >= 0; i--) {\n                var _fn = fns[i];\n                if (_fn === fn) {\n                    fns.splice(i, 1);\n                }\n            }\n        }\n    };\n    return {\n        bind: bind,\n        trigger: trigger,\n        remove: remove\n    }\n})();\n\n// 调用\nEvent.bind(\'Hit\', function(){ console.log(\'bind event\'); }); // 绑定事件\nEvent.trigger("Hit", function(){ console.log(\'trigger event\'); }); // 触发事件\n```\n\n**手写事件代理，并要求兼容浏览器**\n\n```JavaScript\nfunction delegateEvent(parentEl, selector, type, fn) {\n    var handler = function(e){\n          var e = e || window.event;\n          var target = e.target || e.srcElement;\n          if (matchSelector(target, selector)) {\n              if(fn) {\n                  fn.call(target, e);\n              }\n          }\n    };\n    if(parentEl.addEventListener){\n        parentEl.addEventListener(type, handler);\n    }else{\n        parentEl.attachEvent("on" + type, handler);\n    }\n}\n/**\n * support #id, tagName, .className\n */\nfunction matchSelector(ele, selector) {\n    // if use id\n    if (selector.charAt(0) === "#") {\n        return ele.id === selector.slice(1);\n    }\n    // if use class\n    if (selector.charAt(0) === ".") {\n        return (" " + ele.className + " ").indexOf(" " + selector.slice(1) + " ") != -1;\n    }\n    // if use tagName\n    return ele.tagName.toLowerCase() === selector.toLowerCase();\n}\n\n// 调用\nvar box = document.getElementById("box");\ndelegateEvent(box, "a", "click", function(){\n    console.log(this.href);\n})\n```\n\n**手写事件触发器，并要求兼容浏览器**\n\n```JavaScript\nvar fireEvent = function(element, event){\n    if (document.createEventObject){\n        var mockEvent = document.createEventObject();\n        return element.fireEvent(\'on\' + event, mockEvent)\n    }else{\n        var mockEvent = document.createEvent(\'HTMLEvents\');\n        mockEvent.initEvent(event, true, true);\n        return element.dispatchEvent(mockEvent);\n    }\n}\n```\n\n**手写 Function.bind 函数**\n\n```JavaScript\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== "function") {\n      throw new TypeError("\'this\' is not function");\n    }\n\n    // bind\'s default arguments, array without first element\n    // first part arguments for the function\n    var aBindArgs = Array.prototype.slice.call(arguments, 1);\n    var fToBind = this; // the function will be binding\n    var fNOP = function () {};\n    var fBound = function () {\n          // target this will be binding\n          var oThis = this instanceof fNOP ? this : oThis || this;\n          // last part arguments for the function\n          var aCallArgs = Array.prototype.slice.call(arguments);\n          // complete arguments for the function\n          var aFuncArgs = aBindArgs.concat(aCallArgs);\n          return fToBind.apply(oThis, aFuncArgs);\n        };\n\n    // fBound extends fToBind\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\n// 调用\nvar add = function(a, b, c){ return a + b + c;};\nvar newAdd = add.bind(null, 1, 2);\nvar result = newAdd(3);\n```\n\n**手写数组快速排序**\n\n```JavaScript\nvar quickSort = function(arr) {\n    if (arr.length <= 1) { return arr; }\n    var pivotIndex = Math.floor(arr.length / 2);\n    var pivot = arr.splice(pivotIndex, 1)[0];\n    var left = [];\n    var right = [];\n    for (var i = 0, len = arr.length; i < len; i++){\n        if (arr[i] < pivot) {\n          left.push(arr[i]);\n        } else {\n          right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat([pivot], quickSort(right));\n};\n\n// 调用\nquickSort([9, 4, 2, 8, 1, 5, 3, 7]);\n```\n\n**手写数组冒泡排序**\n\n```JavaScript\nvar bubble = function(arr){\n    var maxIndex = arr.length - 1, temp, flag;\n    for (var i = maxIndex; i > 0; i--) {\n        flag = true\n        for (var j = 0; j < i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                flag = false;\n            }\n        }\n        if(! flag){\n            break;\n        }\n    }\n    return arr;\n}\n// 调用\nvar arr = bubble([13, 69, 28, 93, 55, 75, 34]);\n```\n\n**手写数组去重**\n\n\n```JavaScript\nArray.prototype.unique = function() { return [...new Set(this)];};\n// 调用\n[1, 2, 3, 3, 2, 1].unique();\n\nfunction unique1(arr){\n    var hash = {}, result = [];\n    for(var i=0, len=arr.length; i<len; i++){\n        if(! hash[arr[i]]){\n          result.push(arr[i]);\n          hash[arr[i]] = true;\n        }\n    }\n    return result;\n}\n// 调用\nunique1([1, 2, 3, 3, 2, 1]);\n\nArray.prototype.unique2 = function(){\n    this.sort();\n    var result = [this[0]];\n    var len = this.length;\n    for(var i = 0; i < len; i++){\n        if(this[i] !== result[result.length - 1]){\n          result.push(this[i]);\n        }\n    }\n    return result;\n}\n// 调用\n[1, 2, 3, 3, 2, 1].unique2();\n\nfunction unique3(arr){\n    var result = [];\n    for(var i=0; i<arr.length; i++){\n        if(result.indexOf(arr[i]) == -1){\n          result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n// 调用\nunique3([1, 2, 3, 3, 2, 1]);\n```\n\n**将url的查询参数解析成字典对象**\n\n\n```JavaScript\nfunction parseQuery(url) {\n  url = url == null ? window.location.href : url;\n  var search = url.substring(url.lastIndexOf("?") + 1);\n  var hash = {};\n  var reg = /([^?&=]+)=([^?&=]*)/g;\n  search.replace(reg, function (match, $1, $2) {\n      var name = decodeURIComponent($1);\n      var val = decodeURIComponent($2);\n      hash[name] = String(val);\n      return match;\n  });\n  return hash;\n}\n```\n\n**封装函数节流函数**\n\n```JavaScript\nvar throttle = function(fn, delay, mustRunDelay){\n  var timer = null;\n  var t_start;\n  return function(){\n    var context = this, args = arguments, t_curr = +new Date();\n    clearTimeout(timer);\n    if(!t_start){\n      t_start = t_curr;\n    }\n    if(t_curr - t_start >= mustRunDelay){\n      fn.apply(context, args);\n      t_start = t_curr;\n    } else {\n      timer = setTimeout(function(){\n        fn.apply(context, args);\n      }, delay);\n    }\n  };\n};\n\n// 调用（两次间隔50ms内连续触发不执行，但每累计100ms至少执行一次\nwindow.onresize = throttle(myFunc, 50, 100);\n````\n\n**用JS实现千位分隔符**\n\n```JavaScript\nfunction test1(num){\n  var str = (+ num) + \'\';\n  var len = str.length;\n  if(len <= 3) return str;\n  num = \'\';\n  while(len > 3){\n      len -= 3;\n      num = \',\' + str.substr(len, 3) + num;\n  }\n  return str.substr(0, len) + num;\n}\n\nfunction test2(num){\n  // ?= 正向匹配:匹配位置\n  // ?! 正向不匹配:排除位置\n  var str = (+num).toString();\n  var reg = /(?=(?!\\b)(\\d{3})+$)/g;\n  return str.replace(reg, \',\');\n}\n```\n'}}]);